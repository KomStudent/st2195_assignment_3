<- Hello World
a
a <- 1
a
mikey <- "Hello"
mikey
a <- 98756/45689
a
ping(a, 5)
pint(a, 5)
print(a, 5)
a
clearPushBack()
a <- 3.14
b <- b
b <- a
b
a <- 3.14 * 7
a
b
a
source("~/.active-rstudio-document")
plot(dnorm, -4, 4, main= "Density of the Standard Normal Distribution",xlab = "x", ylab="desnit", lty=2)
normal_sample <- rstudent(1000, 0, 1)
normal_sample <- rnorm(1000, 0, 1)
points(density(normal_sample), type="1", color="blue")
points(density(normal_sample), type="1", color="blue")
install.packages(c("digest", "htmltools", "jsonlite", "png", "sass", "stringr", "xfun", "XML"))
install.packages("reticulate")
#install.packages("RSQLite)
if (file.exists("university.db"))
print("Hello")
setwd("C:/Users/Karl.Munroe/OneDrive/LEARNING/UNIVERSITY OF LONDON/ST2195/COURSE-NOTES/LIVE-SESSION-3")
#install.packages("RSQLite)
if (file.exists("university.db"))
print("Hello")
#Connect to the Database
conn <- dbConnect(RSQLite::SQLite(), "university.db")
install.packages("RSQLite")
install.packages("RSQLite")
#Connect to the Database
conn <- dbConnect(RSQLite::SQLite(), "university.db")
#install.packages("RSQLite)
# Test to
# Load the library DBI first
library(DBI)
if (file.exists("university.db"))
print("Hello")
#Connect to the Database
conn <- dbConnect(RSQLite::SQLite(), "university.db")
#List all the tables
dbListTables(conn)
#Connect to the Database
conn <- dbConnect(RSQLite::SQLite(), "university.db")
#List all the tables
dbListTables(conn)
course <- read.csv("course.csv", header = TRUE)
student <- read.csv("Student.csv", header = TRUE)
grade <- read.csv("grade.csv", header = TRUE)
dbListTables(conn)
#Connect to the Database
conn <- dbConnect(RSQLite::SQLite(), "university.db")
#List all the tables
dbListTables(conn)
# Read the CSV into memory
course <- read.csv("course.csv", header = TRUE)
student <- read.csv("Student.csv", header = TRUE)
grade <- read.csv("grade.csv", header = TRUE)
#Write the table to the database
dbWriteTable(conn, "Course", course)
dbReadTable(conn, "Student")
dbReadTable(conn, "Student")
dbListFields(conn, "Student")
data_frame <- dbReadTable(conn, "Student")
dbListFields(conn, "Student")
typeof(data_frame)
data_frame
dbCreateTable(conn, "Teacher", c(staff_id="TEXT", name="TEXT"))
dbCreateTable(conn, "Teacher", c(staff_id="TEXT", name="TEXT"))
#dbCreateTable(conn, "Teacher", c(staff_id="TEXT", name="TEXT"))
dblistTables(conn)
#dbCreateTable(conn, "Teacher", c(staff_id="TEXT", name="TEXT"))
dbListTables(conn)
dbListFields(conn, "Teacher")
dbReadTable(conn, "Teacher")
#dbCreateTable(conn, "Teacher", c(staff_id="TEXT", name="TEXT"))
dbListTables(conn)
dbListFields(conn, "Teacher")
dbReadTable(conn, "Teacher")
dbAppendTable(conn, "Student", data.frame(student_id="20221231", name="Haylee Munroe", year=1))
dbReadTable(conn, "Student")
dbExecute(conn, "UPDATE Student SET student_id = '20221231A' WHERE name= 'Haylee Munroe")
dbExecute(conn, "UPDATE Student SET student_id = '20221231A' WHERE name='Haylee Munroe'")
dbAppendTable(conn, "Student", data.frame(student_id="20221231", name="Haylee Munroe", year=1))
dbReadTable(conn, "Student")
dbExecute(conn, "UPDATE Student SET student_id = '20221231A' WHERE name='Haylee Munroe'")
dbExecute(conn, "SELECT * FROM Student WHERE name='Haylee Munroe'")
dbExecute(conn, "SELECT * FROM Student WHERE name='Haylee Munroe'")
dbExecute(conn, "SELECT * FROM Student WHERE name='Haylee Munroe'")
dbReadTable(conn,"Student")
dbExecute(conn, "UPDATE Student SET student_id = '202212319' WHERE name='Haylee Munroe'")
dbExecute(conn, "SELECT * FROM Student WHERE name='Haylee Munroe'")
dbReadTable(conn,"Student")
dbExecute(conn, "DELETE FROM Student WHERE name='Haylee Munroe'")
dbReadTable(conn,"Student")
dbAppendTable(conn, "Student", data.frame(student_id="20221231", name="Haylee Munroe", year=1))
dbReadTable(conn,"Student")
dbExecute(conn, "UPDATE Student SET student_id = '202212319' WHERE name='Haylee Munroe'")
dbReadTable(conn,"Student")
dbExecute(conn, "SELECT * FROM Student WHERE name='Haylee Munroe'")
dbExecute(conn, "SELECT * FROM Student WHERE name LIKE'Haylee Munroe'")
dbExecute(conn, "SELECT * FROM Student WHERE name='Haylee Munroe'")
dbExecute(conn, "SELECT * FROM Student WHERE name='Haylee Munroe'")
dbReadTable(conn, "Student")
dbExecute(conn, "SELECT * FROM Student WHERE name='Haylee Munroe'")
dbExecute(conn, "SELECT * FROM 'Student' WHERE name='Haylee Munroe'")
dbExecute(conn, "SELECT * FROM 'Student' WHERE name='Grace Clarke'")
dbExecute(conn, "SELECT * FROM Student WHERE name='Grace Clarke'")
dbExecute(conn, "SELECT * FROM Student WHERE name='Haylee Munroe'")
dbExecute(conn, "SELECT * FROM Student WHERE name='Grace Clarke'")
test <- dbExecute(conn, "SELECT * FROM Student WHERE name='Grace Clarke'")
test
test <- dbGetQuery(conn, "SELECT * FROM Student WHERE name='Grace Clarke'")
test
dbExecute(conn, "SELECT * FROM Student WHERE name='Haasylee Munroe'")
dbGetQuery(conn, "SELECT * FROM Student WHERE name='Grace Clarke'")
dbGetQuery(conn, "SELECT * FROM 'Student' WHERE name='Haylee Munroe'")
dbGetQuery(con, "SELECT final_mark FROM Grade WHERE course_id = 'ST101'")
dbGetQuery(conn, "SELECT final_mark FROM Grade WHERE course_id = 'ST101'")
df <- dbGetQuery(conn, "SELECT * FROM Student WHERE name='Grace Clarke'")
df1 <- dbGetQuery(conn, "SELECT * FROM 'Student' WHERE name='Haylee Munroe'")
df2 <- dbGetQuery(conn, "SELECT final_mark FROM Grade WHERE course_id = 'ST101'")
typeof(df)
typeof(df1)
typeof(df2)
class(df)
class(df1)
class(df2)
class(df)
class(df1)
class(df2)
letters
class(letters)
typeof(letters)
# Load the library we are going to use
library(DBI)
# connect to the database
conn <- dbConnect(RSQLite::SQLite(), "univerity.db")
dbListTables(conn)
# Load the library we are going to use
library(DBI)
# connect to the database
conn <- dbConnect(RSQLite::SQLite(), "univerity.db")
dbListTables(conn)
conn.dbname
conn[dbname]
conn::dbname
# Load the library we are going to use
library(DBI)
# connect to the database
conn <- dbConnect(RSQLite::SQLite(), "university.db")
dbListTables(conn)
library(dbplyr)
student_db <- tbl(conn, "Student")
library(dplyr)
student_db <- tbl(conn, "Student")
grade_db <- tbl(conn,"Grade")
course_db <- tbl(conn, "Course")
q1 <- grade_db %>% filter(course_id=="ST101")
q1
library(dplyr)
student_db <- tbl(conn, "Student")
grade_db <- tbl(conn,"Grade")
course_db <- tbl(conn, "Course")
q1 <- grade_db %>% filter(course_id=="ST101")
q1
install.packages("dplyr")
install.packages("dplyr")
q1 <- grade_db %>% filter(course_id=="ST101")
q1
library(dplyr)
student_db <- tbl(conn, "Student")
grade_db <- tbl(conn,"Grade")
course_db <- tbl(conn, "Course")
q1 <- grade_db %>% filter(course_id=="ST101")
q1
q1
show_query(q1)
q2 <- inner_join(studentdb, grade_db) %>% filter(course_id == "ST101") %>% select(name) %>% arrange(name)
q2 <- inner_join(student_db, grade_db) %>% filter(course_id == "ST101") %>% select(name) %>% arrange(name)
q2
show_query(q2)
q3 <- inner_join(student_db, grade_db, by="student_id")
q3
q3 <- inner_join(student_db, grade_db, by="student_id") %>% inner_join(course_db, by="course_id", suffix = c(".student",".course")) %>% filter(name.student == 'Ava Smith' | name.student == 'Freddie Harris')
q3
q3 <- inner_join(student_db, grade_db, by="student_id") %>% inner_join(course_db, by="course_id", suffix = c(".student",".course")) # %>% filter(name.student == 'Ava Smith' | name.student == 'Freddie Harris')
q3
q3 <- inner_join(student_db, grade_db, by="student_id") %>% inner_join(course_db, by="course_id", suffix = c(".student",".course"))  %>% filter(name.student == 'Ava Smith' | name.student == 'Freddie Harris') %>% select(name.course) %>% distinct()
q3
student_db <- tbl(conn, "Student")
grade_db <- tbl(conn,"Grade")
course_db <- tbl(conn, "Course")
q1 <- grade_db %>% filter(course_id=="ST101")
q1
show_query(q1)
q2 <- inner_join(student_db, grade_db) %>% filter(course_id == "ST101") %>% select(name) %>% arrange(name)
q2
show_query(q2)
q2 <- inner_join(student_db, grade_db) %>% filter(course_id == "ST101") %>% select(name) %>% arrange(name)
q2
show_query(q2)
## Getting more data from complicated queries
```{r}
q3 <- inner_join(student_db, grade_db, by="student_id") %>% inner_join(course_db, by="course_id", suffix = c(".student",".course"))  %>% filter(name.student == 'Ava Smith' | name.student == 'Freddie Harris') %>% select(name.course) %>% distinct()
q3
q3
q3
```
q3
q3 <- inner_join(student_db, grade_db, by="student_id") %>% inner_join(course_db, by="course_id", suffix = c(".student",".course"))  %>% filter(name.student == 'Ava Smith' | name.student == 'Freddie Harris') %>% select(name.course) %>% distinct()
q3 <- inner_join(student_db, grade_db, by="student_id") %>% inner_join(course_db, by="course_id", suffix = c(".student",".course"))  %>% filter(name.student == 'Ava Smith' | name.student == 'Freddie Harris') %>% select(name.course) %>% distinct()
q3 <- inner_join(student_db, grade_db, by="student_id") %>% inner_join(course_db, by="course_id", suffix = c(".student",".course"))  %>% filter(name.student == 'Ava Smith' | name.student == 'Freddie Harris') %>% select(name.course) %>% distinct()
q3 <- inner_join(student_db, grade_db, by="student_id") %>% inner_join(course_db, by="course_id", suffix = c(".student",".course"))  %>% filter(name.student == 'Ava Smith' | name.student == 'Freddie Harris') %>% select(name.course) %>% distinct()
q3
setwd("C:/Users/Karl.Munroe/OneDrive/LEARNING/UNIVERSITY OF LONDON/ST2195/GITHUB/st2195_assignment_3")
setwd("C:/Users/Karl.Munroe/OneDrive/LEARNING/UNIVERSITY OF LONDON/ST2195/GITHUB/st2195_assignment_3/st2195_assignment_3")
setwd("C:/Users/Karl.Munroe/OneDrive/LEARNING/UNIVERSITY OF LONDON/ST2195/GITHUB/st2195_assignment_3/st2195_assignment_3")
setwd("C:/Users/Karl.Munroe/OneDrive/LEARNING/UNIVERSITY OF LONDON/ST2195/GITHUB/st2195_assignment_3/st2195_assignment_3/r_sql")
#Load DBI Library
library(DBI)
#Check if database exists. Use absolute path to prevent sync with GitHub Repo
if (file.exists("c:\DATA\R\airlineInfo.db"))
file.remove("c:\DATA\R\airlineInfo.db")
#Create the connection to the Database
conn <- dbConnect(RSQLite::SQLite(),"c:\DATA\R\airlineInfo.db")
# Year 2000
yr2000 <- read.csv("c:\DATA\2000.csv", header=TRUE)
dbWriteTable(conn, "ontime", yr2000)
#Year 2001
yr2001 <- read.csv("c:\DATA\2001.csv", header=TRUE)
dbWriteTable(conn, "ontime", yr2001)
#Load DBI Library
library(DBI)
#Check if database exists. Use absolute path to prevent sync with GitHub Repo
if (file.exists("c:/DATA/R/airlineInfo.db"))
file.remove("c:/DATA/R/airlineInfo.db")
#Create the connection to the Database
conn <- dbConnect(RSQLite::SQLite(),"c:/DATA/R/airlineInfo.db")
# Year 2000
yr2000 <- read.csv("c:/DATA/2000.csv", header=TRUE)
dbWriteTable(conn, "ontime", yr2000)
#Year 2001
yr2001 <- read.csv("c:/DATA/2001.csv", header=TRUE)
dbWriteTable(conn, "ontime", yr2001)
#Check if database exists. Use absolute path to prevent sync with GitHub Repo
if (file.exists("c:/DATA/R/airlineInfo.db"))
file.remove("c:/DATA/R/airlineInfo.db")
View(yr2000)
?appendTable
?dbAppendTable
#Year 2001 - Table has been created in step 1. above, append the data to the table here
yr2001 <- read.csv("c:/DATA/2001.csv", header=TRUE)
dbAppendTable(conn, "ontime", yr2001)
#Year 2002 - Table has been created in step 1. above, append the data to the table here
yr2002 <- read.csv("c:/DATA/2002.csv", header=TRUE)
dbAppendTable(conn, "ontime", yr2002)
#Year 2003 - Table has been created in step 1. above, append the data to the table here
yr2003 <- read.csv("c:/DATA/2003.csv", header=TRUE)
dbAppendTable(conn, "ontime", yr2003)
#Year 2004 - Table has been created in step 1. above, append the data to the table here
yr2004 <- read.csv("c:/DATA/2004.csv", header=TRUE)
dbAppendTable(conn, "ontime", yr2004)
#Year 2005 - Table has been created in step 1. above, append the data to the table here
yr2005 <- read.csv("c:/DATA/2005.csv", header=TRUE)
dbAppendTable(conn, "ontime", yr2005)
# Add in other data tables: planes, airports & carriers
airports <- read.csv("c:/DATA/airports.csv")
carriers <- read.csv("c:/DATA/carriers.csv")
plane-data <- read.csv("c:/DATA/plane-data.csv")
dbWriteTable(conn, "airports", airports)
plane_data <- read.csv("c:/DATA/plane-data.csv")
dbWriteTable(conn, "carriers", carriers)
dbWriteTable(conn, "planes", plane-data)
dbWriteTable(conn, "planes", plane_data)
# Add in other data tables: planes, airports & carriers
airports <- read.csv("c:/DATA/airports.csv", header=TRUE)
carriers <- read.csv("c:/DATA/carriers.csv", header=TRUE)
plane_data <- read.csv("c:/DATA/plane-data.csv", header=TRUE)
dbWriteTable(conn, "airports", airports)
dbWriteTable(conn, "carriers", carriers)
dbWriteTable(conn, "planes", plane_data)
#Finally Close the Connection
dbDisconnect(conn)
